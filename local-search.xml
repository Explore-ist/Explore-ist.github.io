<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>一个开心消消乐的开发笔记</title>
    <link href="/2025/09/11/happy%20eliminating/"/>
    <url>/2025/09/11/happy%20eliminating/</url>
    
    <content type="html"><![CDATA[<h2 id="核心玩法："><a href="#核心玩法：" class="headerlink" title="核心玩法："></a>核心玩法：</h2><ul><li>拥有四个不同的糖果</li><li>三个一消除，四个消除并生成有特殊能力的糖果，五个则是可以生成与其他糖果交互，删除所有格子里与特殊糖果交互的特效糖果</li><li>存在特殊道具可以改变棋盘情况</li><li>目标制：有限的步数、目标的分数、背景的冰块</li><li>棋盘规则：在9*9的棋盘上操作，后续可有特殊的不规则地图</li><li>下落方向：从上往下</li><li>分数：连续消除</li><li>重开与失败：没有可移动的消除糖果组合，重发与随机生成，开局是否允许消除<br>第一个版本先做三消除+整个逻辑+一个道具</li></ul><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
    
    
    
    <tags>
      
      <tag>学习</tag>
      
      <tag>源代码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>开坑：小丑牌源代码解析与使用的算法</title>
    <link href="/2025/07/02/%E5%BC%80%E5%9D%91%EF%BC%9A%E5%B0%8F%E4%B8%91%E7%89%8C%E6%BA%90%E4%BB%A3%E7%A0%81%E8%A7%A3%E6%9E%90%E4%B8%8E%E4%BD%BF%E7%94%A8%E7%9A%84%E7%AE%97%E6%B3%95/"/>
    <url>/2025/07/02/%E5%BC%80%E5%9D%91%EF%BC%9A%E5%B0%8F%E4%B8%91%E7%89%8C%E6%BA%90%E4%BB%A3%E7%A0%81%E8%A7%A3%E6%9E%90%E4%B8%8E%E4%BD%BF%E7%94%A8%E7%9A%84%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="小丑牌基础信息："><a href="#小丑牌基础信息：" class="headerlink" title="小丑牌基础信息："></a>小丑牌基础信息：</h1><table><thead><tr><th></th><th>相关信息</th><th>连接</th></tr></thead><tbody><tr><td>编程语言</td><td>lua语言</td><td><a href="https://www.lua.org/">https://www.lua.org/</a></td></tr><tr><td>运行引擎</td><td>love2d（开源）</td><td><a href="https://www.love2d.org/">https://www.love2d.org/</a></td></tr></tbody></table><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://www.cnblogs.com/rossiXYZ/p/13172155.html">一个解决Lua 随机数生成问题的办法</a><br><a href="https://tree.nathanfriend.com/">树形图生成器</a></p><h1 id="比较关注的重点："><a href="#比较关注的重点：" class="headerlink" title="比较关注的重点："></a>比较关注的重点：</h1><ul><li>存储方面：小丑牌的数据结构，以及如何存储的</li><li>逻辑方面：洗牌算法，种子码逻辑，小丑牌buff运行逻辑</li><li>ui方面：crt扫描特效，一回合大得分“生火”特效，小丑牌生效特效等<br>  👆这些都是一拍脑袋想出来的最想要了解的问题，也是我想学习的第一内容，不过组织不是很严谨<br>更严谨的分析框架如下：</li></ul><ol><li>系统架构与模块划分<ul><li>命名空间管理</li><li>依赖关系与通信</li><li>生命周期分析等</li></ul></li><li>资源管理<ul><li>数据结构：</li><li>资产加载</li><li>对象池与内存复用等</li></ul></li><li>核心逻辑<ul><li>洗牌算法</li><li>种子码管理</li><li>增、减益与卡牌逻辑</li></ul></li><li>输入与事件管理<ul><li>鼠标回调</li><li>事件处理</li></ul></li><li>ui与特效<ul><li>crt扫描特效：shader实现原理</li><li>大得分特效</li><li>卡牌生效特效</li></ul></li><li>音频系统<ul><li>音效加载与转换</li></ul></li><li>配置与脚本<ul><li>游戏配置保存</li></ul></li></ol><p>不过按不按这个方法分析就看我自己了（</p><h1 id="part1-系统架构与模块划分"><a href="#part1-系统架构与模块划分" class="headerlink" title="part1.系统架构与模块划分"></a>part1.系统架构与模块划分</h1><h2 id="找到小丑牌源代码，你也能看"><a href="#找到小丑牌源代码，你也能看" class="headerlink" title="找到小丑牌源代码，你也能看"></a>找到小丑牌源代码，你也能看</h2><p>我们先来看看小丑牌的文件架构：</p><ul><li>导航到你的steam\steamapps\common\Balatro文件夹中，项目文件结构是这样的：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs ASCII">Balatro/ <br>├── Balatro.exe<br>├── https.dll<br>├── license.txt<br>├── love.dll <br>├── lua51.dll <br>├── luasteam.dll <br>├── mpg123.dll <br>├── msvcp120.dll <br>├── msvcr120.dll <br>├── OpenAL32.dll <br>├── readme.txt <br>├── SDL2.dll <br>├── steam_api64.dll <br>└── steam_appid.txt<br></code></pre></td></tr></table></figure><p>从上文可见，除了<code>Balatro.exe</code>其他的都是动态库或者声明等，所以我们将<code>Balatro.exe</code>直接解压到随意一个文件夹里，就能看见源代码组织了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs ASCII">file/ <br>├── engine/ <br>│ ├── animatedsprite.lua <br>│ ├── controller.lua <br>│ ├── event.lua <br>│ ├── http_manager.lua <br>│ ├── moveable.lua<br>│ ├── node.lua <br>│ ├── object.lua<br>│ ├── particals.lua<br>│ ├── profile.lua <br>│ ├── save_manager.lua <br>│ ├── sound_manager.lua <br>│ ├── sprite.lua<br>│ ├── string_packer.lua<br>│ ├── text.lua <br>│ └── ui.lua <br>├── functions/<br>│ ├── button_callbacks.lua<br>│ ├── common_events.lua<br>│ ├── misc_functions.lua <br>│ ├── state_events.lua <br>│ ├── test_funtions.lua <br>│ └── UI_definitions.lua <br>├── localization/ <br>│ ├── en-us <br>│ ├── ... <br>│ └── zh_CN <br>├── resources/<br>│ ├── fonts/ <br>│ │ └── ...<br>│ ├── shaders/<br>│ │ └── ... <br>│ ├── sounds/ <br>│ │ └── ... <br>│ ├── textures/ <br>│ │ └── ...<br>│ └── gamecontrollerdb.txt <br>├── back.lua<br>├── blind.lua <br>├── card.lua<br>├── card_character.lua<br>├── cardarea.lua <br>├── challenges.lua<br>├── conf.lua <br>├── game.lua<br>├── globals.lua <br>├── main.lua <br>├── tag.lua <br>└── version.jkr<br></code></pre></td></tr></table></figure><p>小丑牌的游戏入口是<code>main.lua</code>,<code>engine</code>文件夹里存放着引擎逻辑，而<code>resources</code>则是存放着游戏资源，小丑牌的shader，游戏卡面，以及音乐都在这里</p><p>总体的文件结构就是如上，目前来看还是容易区分的<br>让我们迫不及待的看代码吧！</p><h2 id="状态与记忆的最初：全局变量——globals-lua"><a href="#状态与记忆的最初：全局变量——globals-lua" class="headerlink" title="状态与记忆的最初：全局变量——globals.lua"></a>状态与记忆的最初：全局变量——globals.lua</h2><p>在阅览其他部分代码时，我发现一个关键——一个总类<code>G</code>——很多关键的变量都是这个类的成员，即使命名很直观，但是不理解全部的类有什么，代码的阅读也很难推进。</p><p>而且在阅读的时候，我也有些很惊讶的发现。</p><p>btw，<code>globals.lua</code>有很多变量，具体的这里就不一一讲解了，这里就过一遍逻辑以及一些重要的变量。</p><p>逻辑上，<code>globals.lua</code>先定义了<code>Game</code>类，然后再创建了方法<code>set_globals()</code>再在该方法里完成基础变量的创建与设置。基础变量大类包括（按代码排列顺序）：平台特色，时间变量，设置变量，配置变量，渲染比例变量，游戏状态变量，实例变量，全局常数，颜色常数，以及一些枚举常数。</p><p>在<code>globals.lua</code>最后，将<code>Game</code>类实例化成<code>G</code>:</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">G = Game()<br></code></pre></td></tr></table></figure><p>在平台特色变量设置里，完成对不同平台的特色设置，例如在手机端的小丑牌就没有退出游戏键，而电脑端就有，这部分通过love引擎的<code>love.system.getOS()</code>方法获得平台字符串从而匹配特色设置，以下是部分代码示例（虽然这部分好像没有什么区别）：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">if</span> love.system.getOS() == <span class="hljs-string">&#x27;Windows&#x27;</span> <span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">self</span>.F_DISCORD = <span class="hljs-literal">true</span><br>        <span class="hljs-built_in">self</span>.F_SAVE_TIMER = <span class="hljs-number">5</span><br>        <span class="hljs-built_in">self</span>.F_ENGLISH_ONLY = <span class="hljs-literal">false</span><br>        <span class="hljs-built_in">self</span>.F_CRASH_REPORTS = <span class="hljs-literal">false</span><br>    <span class="hljs-keyword">end</span><br>    <br><span class="hljs-keyword">if</span> love.system.getOS() == <span class="hljs-string">&#x27;OS X&#x27;</span> <span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">self</span>.F_SAVE_TIMER = <span class="hljs-number">5</span><br>        <span class="hljs-built_in">self</span>.F_DISCORD = <span class="hljs-literal">true</span><br>        <span class="hljs-built_in">self</span>.F_ENGLISH_ONLY = <span class="hljs-literal">false</span><br>        <span class="hljs-built_in">self</span>.F_CRASH_REPORTS = <span class="hljs-literal">false</span><br>    <span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>命名规则是全大写，<code>F</code>开头代表<code>Feature</code>，后跟描述，下划线连接</p><p>而在时间变量这一块，则就变得不一样了，最重要的变量设置：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-built_in">self</span>.SEED = <span class="hljs-built_in">os</span>.<span class="hljs-built_in">time</span>()<br></code></pre></td></tr></table></figure><p>简单讲，具体怎么伪随机怎么算就先略了。这里显示的种子码就是<code>os</code>方法获得的时间戳，会获得一个类似于<code>1751901072</code>的时间戳，具体是获取当前的时间，变换时区获得utc时间，计算1970年1月1日到今天的总天数，变成秒，再将当天的时分秒加上，就得到了unix时间戳</p><p>该格式与传奇钢K种子<code>9OUU79</code>格式相去甚远，等待更进一步的发掘</p><hr><p>2025.9.1</p><p>在<code>game.lua</code>的<code>Game:update(dt)</code>，也就是游戏的主体函数里， 通过<code>self.STATE</code>实现了游戏状态机的转移：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">if</span> <span class="hljs-built_in">self</span>.STATE == <span class="hljs-built_in">self</span>.STATES.SHOP <span class="hljs-keyword">then</span><br><span class="hljs-built_in">self</span>:update_shop(dt)<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>而在<code>game.lua</code>中找到<code>Game:update_shop(dt)</code>，可以找到这样的封装函数：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">if</span> G.load_shop_jokers <span class="hljs-keyword">then</span><br><span class="hljs-comment">--从G.shop_jokers.cards池子里获取并渲染ui</span><br>G.load_shop_jokers = <span class="hljs-literal">nil</span><br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">for</span> i = <span class="hljs-number">1</span>, G.GAME.shop.joker_max - #G.shop_jokers.cards <span class="hljs-keyword">do</span><br>    G.shop_jokers:emplace(create_card_for_shop(G.shop_jokers))<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>找到<code>create_card_for_shop(G.shop_jokers)</code>原文定义过长，这里简化逻辑：<br>先检查强制发卡的两个途径（教学关卡或者tag强制）如果都不触发，则按<strong>加权随机</strong>在五个大类里抽取一个（小丑牌、塔罗牌、星球牌、手牌&lt;基本、增强&gt;、幻灵牌）中创建卡与ui、再给tag一次后处理机会；如果抽到的是手牌且持有代金卷，则还会额外判断一次是否带有特殊版本（基本、增强）</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs coq">[入口]<br>   |<br>   <span class="hljs-type">|--(1</span>) 教程强制卡? -------------- 是 --&gt; 生成指定center卡 -&gt; 建UI -&gt; 返回<br>   |                                   <span class="hljs-type">否</span><br><span class="hljs-type">   |--(2</span>) Tag强制生成? -------------- 是 --&gt; Tag可再修改一次 -&gt; 返回<br>   |                                   <span class="hljs-type">否</span><br><span class="hljs-type">   |--(3</span>) 加权随机抽“类别桶”<br>   |        <span class="hljs-type">|-- Joker</span> / Tarot / Planet / PlayingCard / Spectral<br>   |        <span class="hljs-type">&#x27;-- 命中某桶 -&gt; create_card</span>(...) -&gt; create_shop_card_ui(...)<br>   |                   <span class="hljs-type">\</span><br><span class="hljs-type">   |                    &#x27;--(4</span>) Tag后处理：store_joker_modify<br>   |<br>   <span class="hljs-type">&#x27;--(5</span>) （仅扑克牌 &amp; 有 v_illusion）<br>             |<span class="hljs-type">-- 20</span>% 赋予特殊版本?<br>             &#x27;-- 是 -&gt; foil/holo/polychrome 三选一<br><br></code></pre></td></tr></table></figure><hr><h3 id="随机部分："><a href="#随机部分：" class="headerlink" title="随机部分："></a>随机部分：</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> total_rate = joker_rate + tarot_rate + planet_rate + playing_card_rate + spectral_rate<br><span class="hljs-keyword">local</span> polled_rate = pseudorandom(pseudoseed(<span class="hljs-string">&#x27;cdt&#x27;</span>..G.GAME.round_resets.ante)) * total_rate<br><span class="hljs-keyword">local</span> check_rate = <span class="hljs-number">0</span><br><br><span class="hljs-keyword">for</span> _, v <span class="hljs-keyword">in</span> <span class="hljs-built_in">ipairs</span>(&#123;<br>  &#123;<span class="hljs-built_in">type</span>=<span class="hljs-string">&#x27;Joker&#x27;</span>,  val=G.GAME.joker_rate&#125;,<br>  &#123;<span class="hljs-built_in">type</span>=<span class="hljs-string">&#x27;Tarot&#x27;</span>,  val=G.GAME.tarot_rate&#125;,<br>  &#123;<span class="hljs-built_in">type</span>=<span class="hljs-string">&#x27;Planet&#x27;</span>, val=G.GAME.planet_rate&#125;,<br>  &#123;<span class="hljs-built_in">type</span>=(G.GAME.used_vouchers[<span class="hljs-string">&quot;v_illusion&quot;</span>] <span class="hljs-keyword">and</span> pseudorandom(pseudoseed(<span class="hljs-string">&#x27;illusion&#x27;</span>)) &gt; <span class="hljs-number">0.6</span>)<br>        <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;Enhanced&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;Base&#x27;</span>, val=G.GAME.playing_card_rate&#125;,<br>  &#123;<span class="hljs-built_in">type</span>=<span class="hljs-string">&#x27;Spectral&#x27;</span>, val=G.GAME.spectral_rate&#125;,<br>&#125;) <span class="hljs-keyword">do</span><br>  <span class="hljs-keyword">if</span> polled_rate &gt; check_rate <span class="hljs-keyword">and</span> polled_rate &lt;= check_rate + v.val <span class="hljs-keyword">then</span><br>     <span class="hljs-comment">-- 命中 v.type 这一类：创建卡与UI，然后跳出</span><br>  <span class="hljs-keyword">end</span><br>  check_rate = check_rate + v.val  <span class="hljs-comment">-- 推进累积区间</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>这样就很直观了，先伪随机生成一个概率，然后逐个扫描这五个区间，如果匹配，则生成卡牌创建ui。</p><ul><li>先将总概率求和，得到总概率区间</li><li>再由伪随机生成一个随机数（区间是0-1），与总区间相乘，相当于在该区间内抽样</li><li>再逐个扫描每个区间，检测是否是在这个区间内，如果是就创建卡牌与ui</li><li>这个概率模型是加权随机数，这样概率的带权随机数是公平的</li><li>lua的随机数函数是对c语言随机数函数（线性同余法）的简单封装，所以要快速开局时间戳很可能类似，使得序列相同，不知是否是这样的实现</li></ul><p>我们继续寻找随机数函数的秘密<br>找到经常嵌套使用的两个伪随机函数的是实现：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">pseudoseed</span><span class="hljs-params">(key, predict_seed)</span></span><br>  <span class="hljs-keyword">if</span> key == <span class="hljs-string">&#x27;seed&#x27;</span> <span class="hljs-keyword">then</span> <span class="hljs-keyword">return</span> <span class="hljs-built_in">math</span>.<span class="hljs-built_in">random</span>() <span class="hljs-keyword">end</span><br><span class="hljs-comment">--伪随机种子</span><br>  <span class="hljs-keyword">if</span> predict_seed <span class="hljs-keyword">then</span> <br>    <span class="hljs-keyword">local</span> _pseed = pseudohash(key..(predict_seed <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;&#x27;</span>))<br>    _pseed = <span class="hljs-built_in">math</span>.<span class="hljs-built_in">abs</span>(<span class="hljs-built_in">tonumber</span>(<span class="hljs-built_in">string</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;%.13f&quot;</span>, (<span class="hljs-number">2.134453429141</span>+_pseed*<span class="hljs-number">1.72431234</span>)%<span class="hljs-number">1</span>)))<br>    <span class="hljs-keyword">return</span> (_pseed + (pseudohash(predict_seed) <span class="hljs-keyword">or</span> <span class="hljs-number">0</span>))/<span class="hljs-number">2</span><br>  <span class="hljs-keyword">end</span><br>  <br>  <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> G.GAME.pseudorandom[key] <span class="hljs-keyword">then</span> <br>    G.GAME.pseudorandom[key] = pseudohash(key..(G.GAME.pseudorandom.seed <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;&#x27;</span>))<br>  <span class="hljs-keyword">end</span><br><br>  G.GAME.pseudorandom[key] = <span class="hljs-built_in">math</span>.<span class="hljs-built_in">abs</span>(<span class="hljs-built_in">tonumber</span>(<span class="hljs-built_in">string</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;%.13f&quot;</span>, (<span class="hljs-number">2.134453429141</span>+G.GAME.pseudorandom[key]*<span class="hljs-number">1.72431234</span>)%<span class="hljs-number">1</span>)))<br>  <span class="hljs-keyword">return</span> (G.GAME.pseudorandom[key] + (G.GAME.pseudorandom.hashed_seed <span class="hljs-keyword">or</span> <span class="hljs-number">0</span>))/<span class="hljs-number">2</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">pseudorandom</span><span class="hljs-params">(seed, min, max)</span></span><br><span class="hljs-comment">--伪随机</span><br>  <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(seed) == <span class="hljs-string">&#x27;string&#x27;</span> <span class="hljs-keyword">then</span> seed = pseudoseed(seed) <span class="hljs-keyword">end</span><br>  <span class="hljs-built_in">math</span>.<span class="hljs-built_in">randomseed</span>(seed)<br>  <span class="hljs-keyword">if</span> <span class="hljs-built_in">min</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">max</span> <span class="hljs-keyword">then</span> <span class="hljs-keyword">return</span> <span class="hljs-built_in">math</span>.<span class="hljs-built_in">random</span>(<span class="hljs-built_in">min</span>, <span class="hljs-built_in">max</span>)<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-built_in">math</span>.<span class="hljs-built_in">random</span>() <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>pseudoseed的作用</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs processing">[入口]<br>├── (<span class="hljs-number">1</span>)如果<span class="hljs-built_in">key</span>为字符串<span class="hljs-string">&#x27;seed&#x27;</span>-----------是-&gt;则由math.<span class="hljs-property">random</span>()返回随机数<br>├── (<span class="hljs-number">2</span>)如果预测种子为真----------是-&gt;将<span class="hljs-built_in">key</span>字符串与<span class="hljs-string">&#x27;predict_seed&#x27;</span>做拼接，将这个字符串哈成<span class="hljs-number">0</span><span class="hljs-number">-1</span>的浮点数，再线性推进一轮，取小数点后十三位，最后返回<span class="hljs-string">&#x27;pseudohash(predict_seed)&#x27;</span>的平均值<br>|<br>├── (<span class="hljs-number">3</span>)如果伪随机的<span class="hljs-built_in">key</span>不曾出现在队列里，则将<span class="hljs-built_in">key</span>与该局种子码拼接，哈成初始值并加入队列<br>└── (<span class="hljs-number">4</span>)如果该<span class="hljs-built_in">key</span>存在，则线性推进一轮并加入该<span class="hljs-built_in">key</span>所在队列，并返回与<span class="hljs-string">&#x27;G.GAME.pseudorandom.hashed_seed&#x27;</span>的平均值<br></code></pre></td></tr></table></figure><p>而pseudorandom：</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mel">[入口]<br>├── (<span class="hljs-number">1</span>)如果<span class="hljs-keyword">seed</span>的类型是字符串<br>│   ├── <span class="hljs-keyword">seed</span> = pseudoseed(<span class="hljs-keyword">seed</span>)，这会推进一次key的队列<br>│   └── 调用一次math.randomseed(<span class="hljs-keyword">seed</span>)改变全局rng，立刻获取一次random()<br>├── (<span class="hljs-number">2</span>)如果有指定<span class="hljs-keyword">max</span>、<span class="hljs-keyword">min</span>，则返回[<span class="hljs-keyword">min</span>,<span class="hljs-keyword">max</span>)的随机数<br>└── (<span class="hljs-number">3</span>)没有指定，则返回[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>)的随机数<br></code></pre></td></tr></table></figure><p>这样保证可复现：</p><ul><li>初始条件一致<ul><li><code>G.GAME.pseudorandom.seed</code></li><li><code>G.GAME.pseudorandom.hashed_seed</code></li></ul></li><li>调用序列一致<ul><li>相同顺序、次序对应相同的key调用<code>pseudoseed</code>&#x2F;<code>pseudorandom</code><br>这样就能实现：使用不同的key，管理不同的随机数生成序列，相同的key可以得到相同的随机数序列而且return的都是<code>math.ramdom()</code>可以保证随机性与公平性</li></ul></li></ul><h2 id="为什么我在商店就是刷不出某张我想要的卡？"><a href="#为什么我在商店就是刷不出某张我想要的卡？" class="headerlink" title="为什么我在商店就是刷不出某张我想要的卡？"></a>为什么我在商店就是刷不出某张我想要的卡？</h2><p>依照上文我们解析的随机数算法，我在matlab里写了个测试程序，复刻了这个算法，并统计命中情况：</p><ul><li>为了简化模型，没有对joker池子里每个卡牌稀有度进行区分，默认所有卡牌取得的概率相同</li><li>没有加入特殊小丑牌的效果，是按照默认概率设置的：</li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs lua">joker_rate = <span class="hljs-number">20</span>,<br>tarot_rate = <span class="hljs-number">4</span>,<br>planet_rate = <span class="hljs-number">4</span>, <br>spectral_rate = <span class="hljs-number">0</span>,<br>playing_card_rate = <span class="hljs-number">0</span>,<br></code></pre></td></tr></table></figure><p>![[9ouu79in200000 1.png]]</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs routeros">=== 类别分布（<span class="hljs-attribute">T</span>=200000） ===<br>Joker   : <span class="hljs-attribute">obs</span>=0.71617  <span class="hljs-attribute">exp</span>=0.71429<br>Tarot   : <span class="hljs-attribute">obs</span>=0.14285  <span class="hljs-attribute">exp</span>=0.14286<br>Planet  : <span class="hljs-attribute">obs</span>=0.14098  <span class="hljs-attribute">exp</span>=0.14286<br>Chi-square p-value vs expected: 0.05163 (<span class="hljs-attribute">df</span>=2)<br><br>=== 池内均匀性卡方检验（与等概率对比） ===<br>Joker   : <span class="hljs-attribute">chi2</span>=160.90  <span class="hljs-attribute">df</span>=149  <span class="hljs-attribute">p</span>=0.239<br>Tarot   : <span class="hljs-attribute">chi2</span>=20.42  <span class="hljs-attribute">df</span>=21  <span class="hljs-attribute">p</span>=0.495<br>Planet  : <span class="hljs-attribute">chi2</span>=14.65  <span class="hljs-attribute">df</span>=11  <span class="hljs-attribute">p</span>=0.199<br></code></pre></td></tr></table></figure><p>可以看到，在大量的抽取（200000次）下，总体分布均匀，确实是相对平滑的，这个算法是公平的<br>可是我们一场游戏商店不会刷新这么多次，在可观的游戏周期内，每个商店刷新十次，一层刷三个商店，一共八层，一共240次，可以观测到（’9OUU79’）：<br>![[9ouu79in240.png]]<br>第66号小丑牌生成次数最多，出现了六次<br>![[Pasted image 20250914120840.png]]<br>而多次出现的小丑牌（48）与只出现一次的小丑牌（44）数量接近相等，而有六十来张是抽不到的。<br>而将抽取次数调至500次，有如下结果：<br>![[9ouu79in500.png]]<br>在500次抽取下，仍然会出现有抽不到的卡牌<br>![[9ouu79in1000.png]]<br>在1000次抽取下，还有两个未能抽取到，这已经远远超出了标准游戏流程<br>更何况我们没有加入稀有，罕见等要素，想要每局都抽到这些卡更是难上加难<br>想要每张牌都抽到一次，则抽取次数来到了1400：（对于该种子码来说）<br>![[9ouu79in1400.png]]<br>所以换言之，每一个种子在游戏周期内一定有无法抽取到的卡牌，而想要抽取到你想要的那个“关键卡牌”很可能在随机队列的1400张之后。<br>不过对于肉鸽游戏来说，这样的随机才好玩一点，不然每一轮都是固定的套路，那就很没有意思了。</p><hr><p>这种随机算法确实很有意思，加权抽样检测生成卡牌，一局里一定有无法抽取的卡牌。过段时间开坑种子生成生成逻辑</p>]]></content>
    
    
    
    <tags>
      
      <tag>学习</tag>
      
      <tag>源代码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>github 常用命令</title>
    <link href="/2025/07/02/git-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2025/07/02/git-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h2 id="前言：git虽然指令多掌握比较乱，但是如果分成使用场景就好多了"><a href="#前言：git虽然指令多掌握比较乱，但是如果分成使用场景就好多了" class="headerlink" title="前言：git虽然指令多掌握比较乱，但是如果分成使用场景就好多了"></a>前言：git虽然指令多掌握比较乱，但是如果分成使用场景就好多了</h2><h2 id="当项目开始："><a href="#当项目开始：" class="headerlink" title="当项目开始："></a>当项目开始：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 在本地目录初始化</span><br>git init<br><span class="hljs-comment"># 添加所有文件并首条提交</span><br>git add .<br>git commit -m <span class="hljs-string">&quot;chore(init): 初始化项目结构&quot;</span><br><br><span class="hljs-comment"># 关联远程仓库</span><br>git remote add origin git@github.com:your_org/your_repo.git<br><br><span class="hljs-comment"># 将 main 分支推送到远端并建立追踪关系</span><br>git push -u origin main<br></code></pre></td></tr></table></figure><h2 id="在日常开发："><a href="#在日常开发：" class="headerlink" title="在日常开发："></a>在日常开发：</h2><pre><code class="hljs">目标：在 feature 分支上并行开发、保持主干稳定</code></pre><h3 id="1-创建并切换分支："><a href="#1-创建并切换分支：" class="headerlink" title="1.创建并切换分支："></a>1.创建并切换分支：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git checkout -b feature/user-login<br></code></pre></td></tr></table></figure><h3 id="2-开发过程中频繁同步主干"><a href="#2-开发过程中频繁同步主干" class="headerlink" title="2.开发过程中频繁同步主干"></a>2.开发过程中频繁同步主干</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 切回主干，拉取最新</span><br>git checkout main<br>git pull origin main<br><span class="hljs-comment"># 回到 feature 分支，合并或变基</span><br>git checkout feature/user-login<br>git rebase main         <span class="hljs-comment"># 或 git merge main</span><br><br></code></pre></td></tr></table></figure><h3 id="3-暂存未完成的工作"><a href="#3-暂存未完成的工作" class="headerlink" title="3.暂存未完成的工作"></a>3.暂存未完成的工作</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">git add &lt;file&gt;<br>git stash               <span class="hljs-comment"># 将修改存入“栈顶”</span><br><span class="hljs-comment"># 切分支或拉取之后恢复</span><br>git stash pop<br></code></pre></td></tr></table></figure><h2 id="当功能完成："><a href="#当功能完成：" class="headerlink" title="当功能完成："></a>当功能完成：</h2><h3 id="1-合并到主干："><a href="#1-合并到主干：" class="headerlink" title="1.合并到主干："></a>1.合并到主干：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 切回主干</span><br>git checkout main<br><span class="hljs-comment"># 拉取最新，确保主干同步</span><br>git pull origin main<br><span class="hljs-comment"># 合并 feature</span><br>git merge --no-ff feature/user-login -m <span class="hljs-string">&quot;feat(login): 用户登录功能合并&quot;</span><br></code></pre></td></tr></table></figure><h3 id="2-推送到远程"><a href="#2-推送到远程" class="headerlink" title="2.推送到远程"></a>2.推送到远程</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git push origin main<br></code></pre></td></tr></table></figure><h3 id="3-删除已完成分支"><a href="#3-删除已完成分支" class="headerlink" title="3.删除已完成分支"></a>3.删除已完成分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git branch -d feature/user-login<br>git push origin --delete feature/user-login<br></code></pre></td></tr></table></figure><h2 id="Pull-Request-代码评审与拉取请求"><a href="#Pull-Request-代码评审与拉取请求" class="headerlink" title="Pull Request:代码评审与拉取请求"></a>Pull Request:代码评审与拉取请求</h2><ul><li>检查后再合并</li></ul><h3 id="1-新建分支，推送"><a href="#1-新建分支，推送" class="headerlink" title="1.新建分支，推送"></a>1.新建分支，推送</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git push -u origin feature/user-login<br></code></pre></td></tr></table></figure><h3 id="2-发起mergeRequest"><a href="#2-发起mergeRequest" class="headerlink" title="2.发起mergeRequest"></a>2.发起mergeRequest</h3><h3 id="3-修改后"><a href="#3-修改后" class="headerlink" title="3.修改后:"></a>3.修改后:</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 本地调整</span><br>git commit --amend       <span class="hljs-comment"># 修改最后一次提交信息</span><br>git rebase -i main       <span class="hljs-comment"># 清理提交历史</span><br>git push -f origin feature/user-login<br></code></pre></td></tr></table></figure><h2 id="发布与版本管理："><a href="#发布与版本管理：" class="headerlink" title="发布与版本管理："></a>发布与版本管理：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 在主干上</span><br>git checkout main<br>git pull origin main<br><br><span class="hljs-comment"># 创建版本标签</span><br>git tag -a v1.2.0 -m <span class="hljs-string">&quot;release: 发布 v1.2.0，增加用户登录、权限校验功能&quot;</span><br><br><span class="hljs-comment"># 推送标签</span><br>git push origin v1.2.0<br><br></code></pre></td></tr></table></figure><h1 id="避免代码冲突：每天至少同步主干一次，明确分工，一个分支做一件事"><a href="#避免代码冲突：每天至少同步主干一次，明确分工，一个分支做一件事" class="headerlink" title="避免代码冲突：每天至少同步主干一次，明确分工，一个分支做一件事"></a>避免代码冲突：每天至少同步主干一次，明确分工，一个分支做一件事</h1><p>但是你要是还是搞不懂，那就用UGit吧</p>]]></content>
    
    
    
    <tags>
      
      <tag>工作流</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo 常用命令</title>
    <link href="/2025/07/02/hexo-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2025/07/02/hexo-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h2 id="第一次使用会用上的："><a href="#第一次使用会用上的：" class="headerlink" title="第一次使用会用上的："></a>第一次使用会用上的：</h2><p>打开cmd</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init<br>npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><h2 id="之后："><a href="#之后：" class="headerlink" title="之后："></a>之后：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new [layout] &lt;title&gt;<br>hexo clean<br>hexo g -f -d<br></code></pre></td></tr></table></figure><p>创建md文件与提交静态网站</p><h2 id="尽量不要使用git，管理会很乱（"><a href="#尽量不要使用git，管理会很乱（" class="headerlink" title="尽量不要使用git，管理会很乱（"></a>尽量不要使用git，管理会很乱（</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">@<span class="hljs-built_in">echo</span> off<br>call hexo clean<br>call hexo g -f -d<br><br>pause<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>网站管理</tag>
      
      <tag>工作流</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
